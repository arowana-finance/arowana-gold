/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common.js";

export interface GoldMinterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "USDC"
      | "USDT"
      | "addSettler"
      | "autoSettle"
      | "burnOrders"
      | "calculateGoldFee"
      | "canBurn"
      | "canMint"
      | "fees"
      | "getGoldAmount"
      | "getUsdAmount"
      | "goldPriceFeed"
      | "goldReserveFeed"
      | "goldToken"
      | "initialize"
      | "initializeGoldMinter"
      | "levels"
      | "minGoldAmount"
      | "minGoldFee"
      | "minGoldFeeAmount"
      | "mintOrders"
      | "owner"
      | "removeSettler"
      | "renounceOwnership"
      | "requestBurn"
      | "requestBurnPermit"
      | "requestMint"
      | "requestMintPermit"
      | "setLevel"
      | "settleBurn"
      | "settleMint"
      | "settlers"
      | "slippage"
      | "tradeLevel"
      | "transferOwnership"
      | "updateAutoSettle"
      | "updateFees"
      | "updateMinGold"
      | "updateMinGoldFee"
      | "updateMinGoldFeeAmount"
      | "updateRecipient"
      | "updateSlippage"
      | "updateTradingLevel"
      | "usdRecipient",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddSettler"
      | "Initialized(uint64)"
      | "Initialized(address,uint8,address,uint8,address,uint8,address,address)"
      | "OwnershipTransferred"
      | "RemoveSettler"
      | "RequestBurn"
      | "RequestMint"
      | "SettleBurn"
      | "SettleMint"
      | "UpdateAutoSettle"
      | "UpdateFees"
      | "UpdateLevel"
      | "UpdateMinGold"
      | "UpdateMinGoldFee"
      | "UpdateMinGoldFeeAmount"
      | "UpdateRecipient"
      | "UpdateSlippage"
      | "UpdateTradingLevel",
  ): EventFragment;

  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addSettler",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "autoSettle",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "burnOrders",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "calculateGoldFee",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "canBurn",
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "canMint",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "fees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGoldAmount",
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdAmount",
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "goldPriceFeed",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "goldReserveFeed",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "goldToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "initializeGoldMinter",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      boolean,
    ],
  ): string;
  encodeFunctionData(functionFragment: "levels", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "minGoldAmount",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "minGoldFee",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "minGoldFeeAmount",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "mintOrders",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeSettler",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "requestBurn",
    values: [AddressLike, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "requestBurnPermit",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "requestMint",
    values: [AddressLike, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "requestMintPermit",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "setLevel",
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "settleBurn",
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "settleMint",
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "settlers", values?: undefined): string;
  encodeFunctionData(functionFragment: "slippage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tradeLevel",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "updateAutoSettle",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinGold",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinGoldFee",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinGoldFeeAmount",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "updateRecipient",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "updateSlippage",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "updateTradingLevel",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "usdRecipient",
    values?: undefined,
  ): string;

  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addSettler", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "autoSettle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateGoldFee",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "canBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGoldAmount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdAmount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "goldPriceFeed",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "goldReserveFeed",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "goldToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeGoldMinter",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "levels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minGoldAmount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "minGoldFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minGoldFeeAmount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "mintOrders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSettler",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBurn",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBurnPermit",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestMint",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestMintPermit",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "setLevel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settleBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settleMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settlers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slippage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tradeLevel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAutoSettle",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMinGold",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinGoldFee",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinGoldFeeAmount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRecipient",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSlippage",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTradingLevel",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdRecipient",
    data: BytesLike,
  ): Result;
}

export namespace AddSettlerEvent {
  export type InputTuple = [newSettler: AddressLike];
  export type OutputTuple = [newSettler: string];
  export interface OutputObject {
    newSettler: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Initialized_uint64_Event {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Initialized_address_uint8_address_uint8_address_uint8_address_address_Event {
  export type InputTuple = [
    goldToken: AddressLike,
    goldTokenDecimals: BigNumberish,
    USDT: AddressLike,
    USDTDecimals: BigNumberish,
    USDC: AddressLike,
    USDCDecimals: BigNumberish,
    goldPriceFeed: AddressLike,
    goldReserveFeed: AddressLike,
  ];
  export type OutputTuple = [
    goldToken: string,
    goldTokenDecimals: bigint,
    USDT: string,
    USDTDecimals: bigint,
    USDC: string,
    USDCDecimals: bigint,
    goldPriceFeed: string,
    goldReserveFeed: string,
  ];
  export interface OutputObject {
    goldToken: string;
    goldTokenDecimals: bigint;
    USDT: string;
    USDTDecimals: bigint;
    USDC: string;
    USDCDecimals: bigint;
    goldPriceFeed: string;
    goldReserveFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveSettlerEvent {
  export type InputTuple = [oldSettler: AddressLike];
  export type OutputTuple = [oldSettler: string];
  export interface OutputObject {
    oldSettler: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestBurnEvent {
  export type InputTuple = [
    nonce: BigNumberish,
    seller: AddressLike,
    usdToken: AddressLike,
    goldAmount: BigNumberish,
    minUsdAmount: BigNumberish,
  ];
  export type OutputTuple = [
    nonce: bigint,
    seller: string,
    usdToken: string,
    goldAmount: bigint,
    minUsdAmount: bigint,
  ];
  export interface OutputObject {
    nonce: bigint;
    seller: string;
    usdToken: string;
    goldAmount: bigint;
    minUsdAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestMintEvent {
  export type InputTuple = [
    nonce: BigNumberish,
    buyer: AddressLike,
    usdToken: AddressLike,
    usdAmount: BigNumberish,
    minGoldAmount: BigNumberish,
  ];
  export type OutputTuple = [
    nonce: bigint,
    buyer: string,
    usdToken: string,
    usdAmount: bigint,
    minGoldAmount: bigint,
  ];
  export interface OutputObject {
    nonce: bigint;
    buyer: string;
    usdToken: string;
    usdAmount: bigint;
    minGoldAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettleBurnEvent {
  export type InputTuple = [
    nonce: BigNumberish,
    usdAmount: BigNumberish,
    success: boolean,
  ];
  export type OutputTuple = [
    nonce: bigint,
    usdAmount: bigint,
    success: boolean,
  ];
  export interface OutputObject {
    nonce: bigint;
    usdAmount: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettleMintEvent {
  export type InputTuple = [
    nonce: BigNumberish,
    goldAmount: BigNumberish,
    success: boolean,
  ];
  export type OutputTuple = [
    nonce: bigint,
    goldAmount: bigint,
    success: boolean,
  ];
  export interface OutputObject {
    nonce: bigint;
    goldAmount: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateAutoSettleEvent {
  export type InputTuple = [settle: boolean];
  export type OutputTuple = [settle: boolean];
  export interface OutputObject {
    settle: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateFeesEvent {
  export type InputTuple = [newFees: BigNumberish];
  export type OutputTuple = [newFees: bigint];
  export interface OutputObject {
    newFees: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateLevelEvent {
  export type InputTuple = [user: AddressLike, level: BigNumberish];
  export type OutputTuple = [user: string, level: bigint];
  export interface OutputObject {
    user: string;
    level: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMinGoldEvent {
  export type InputTuple = [minGoldAmount: BigNumberish];
  export type OutputTuple = [minGoldAmount: bigint];
  export interface OutputObject {
    minGoldAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMinGoldFeeEvent {
  export type InputTuple = [minGoldFee: BigNumberish];
  export type OutputTuple = [minGoldFee: bigint];
  export interface OutputObject {
    minGoldFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMinGoldFeeAmountEvent {
  export type InputTuple = [minGoldFeeAmount: BigNumberish];
  export type OutputTuple = [minGoldFeeAmount: bigint];
  export interface OutputObject {
    minGoldFeeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateRecipientEvent {
  export type InputTuple = [newRecipient: AddressLike];
  export type OutputTuple = [newRecipient: string];
  export interface OutputObject {
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateSlippageEvent {
  export type InputTuple = [newSlippage: BigNumberish];
  export type OutputTuple = [newSlippage: bigint];
  export interface OutputObject {
    newSlippage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateTradingLevelEvent {
  export type InputTuple = [level: BigNumberish];
  export type OutputTuple = [level: bigint];
  export interface OutputObject {
    level: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GoldMinter extends BaseContract {
  connect(runner?: ContractRunner | null): GoldMinter;
  waitForDeployment(): Promise<this>;

  interface: GoldMinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  USDC: TypedContractMethod<[], [string], "view">;

  USDT: TypedContractMethod<[], [string], "view">;

  addSettler: TypedContractMethod<
    [_settler: AddressLike],
    [void],
    "nonpayable"
  >;

  autoSettle: TypedContractMethod<[], [boolean], "view">;

  burnOrders: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, boolean, boolean] & {
        seller: string;
        usdToken: string;
        goldAmount: bigint;
        minUsdAmount: bigint;
        usdAmount: bigint;
        success: boolean;
        isSettled: boolean;
      },
    ],
    "view"
  >;

  calculateGoldFee: TypedContractMethod<
    [_goldAmount: BigNumberish],
    [bigint],
    "view"
  >;

  canBurn: TypedContractMethod<
    [usdToken: AddressLike, usdAmount: BigNumberish],
    [boolean],
    "view"
  >;

  canMint: TypedContractMethod<[goldAmount: BigNumberish], [boolean], "view">;

  fees: TypedContractMethod<[], [bigint], "view">;

  getGoldAmount: TypedContractMethod<
    [usdToken: AddressLike, usdAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getUsdAmount: TypedContractMethod<
    [usdToken: AddressLike, goldAmount: BigNumberish],
    [bigint],
    "view"
  >;

  goldPriceFeed: TypedContractMethod<[], [string], "view">;

  goldReserveFeed: TypedContractMethod<[], [string], "view">;

  goldToken: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [_initOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  initializeGoldMinter: TypedContractMethod<
    [
      _goldToken: AddressLike,
      _USDT: AddressLike,
      _USDC: AddressLike,
      _goldPriceFeed: AddressLike,
      _goldReserveFeed: AddressLike,
      _usdRecipient: AddressLike,
      _owner: AddressLike,
      _autoSettle: boolean,
    ],
    [void],
    "nonpayable"
  >;

  levels: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  minGoldAmount: TypedContractMethod<[], [bigint], "view">;

  minGoldFee: TypedContractMethod<[], [bigint], "view">;

  minGoldFeeAmount: TypedContractMethod<[], [bigint], "view">;

  mintOrders: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, boolean, boolean] & {
        buyer: string;
        usdToken: string;
        usdAmount: bigint;
        minGoldAmount: bigint;
        goldAmount: bigint;
        success: boolean;
        isSettled: boolean;
      },
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeSettler: TypedContractMethod<
    [_settler: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestBurn: TypedContractMethod<
    [
      _usdToken: AddressLike,
      _goldAmount: BigNumberish,
      _minUsdAmount: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;

  requestBurnPermit: TypedContractMethod<
    [
      _usdToken: AddressLike,
      _goldAmount: BigNumberish,
      _minUsdAmount: BigNumberish,
      _sigDeadline: BigNumberish,
      _signature: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  requestMint: TypedContractMethod<
    [
      _usdToken: AddressLike,
      _usdAmount: BigNumberish,
      _minGoldAmount: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;

  requestMintPermit: TypedContractMethod<
    [
      _usdToken: AddressLike,
      _usdAmount: BigNumberish,
      _minGoldAmount: BigNumberish,
      _sigDeadline: BigNumberish,
      _signature: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  setLevel: TypedContractMethod<
    [user: AddressLike, level: BigNumberish],
    [void],
    "nonpayable"
  >;

  settleBurn: TypedContractMethod<
    [burnNonce: BigNumberish, usdAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  settleMint: TypedContractMethod<
    [mintNonce: BigNumberish, goldAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  settlers: TypedContractMethod<[], [string[]], "view">;

  slippage: TypedContractMethod<[], [bigint], "view">;

  tradeLevel: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAutoSettle: TypedContractMethod<[], [void], "nonpayable">;

  updateFees: TypedContractMethod<[_fees: BigNumberish], [void], "nonpayable">;

  updateMinGold: TypedContractMethod<
    [_minGold: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMinGoldFee: TypedContractMethod<
    [_minGoldFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMinGoldFeeAmount: TypedContractMethod<
    [_minGoldFeeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateRecipient: TypedContractMethod<
    [_usdRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSlippage: TypedContractMethod<
    [_slippage: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTradingLevel: TypedContractMethod<
    [level: BigNumberish],
    [void],
    "nonpayable"
  >;

  usdRecipient: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "USDC",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "USDT",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addSettler",
  ): TypedContractMethod<[_settler: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "autoSettle",
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "burnOrders",
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, boolean, boolean] & {
        seller: string;
        usdToken: string;
        goldAmount: bigint;
        minUsdAmount: bigint;
        usdAmount: bigint;
        success: boolean;
        isSettled: boolean;
      },
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateGoldFee",
  ): TypedContractMethod<[_goldAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "canBurn",
  ): TypedContractMethod<
    [usdToken: AddressLike, usdAmount: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "canMint",
  ): TypedContractMethod<[goldAmount: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "fees",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGoldAmount",
  ): TypedContractMethod<
    [usdToken: AddressLike, usdAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUsdAmount",
  ): TypedContractMethod<
    [usdToken: AddressLike, goldAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "goldPriceFeed",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "goldReserveFeed",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "goldToken",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize",
  ): TypedContractMethod<[_initOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initializeGoldMinter",
  ): TypedContractMethod<
    [
      _goldToken: AddressLike,
      _USDT: AddressLike,
      _USDC: AddressLike,
      _goldPriceFeed: AddressLike,
      _goldReserveFeed: AddressLike,
      _usdRecipient: AddressLike,
      _owner: AddressLike,
      _autoSettle: boolean,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "levels",
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "minGoldAmount",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minGoldFee",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minGoldFeeAmount",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintOrders",
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, boolean, boolean] & {
        buyer: string;
        usdToken: string;
        usdAmount: bigint;
        minGoldAmount: bigint;
        goldAmount: bigint;
        success: boolean;
        isSettled: boolean;
      },
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeSettler",
  ): TypedContractMethod<[_settler: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestBurn",
  ): TypedContractMethod<
    [
      _usdToken: AddressLike,
      _goldAmount: BigNumberish,
      _minUsdAmount: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestBurnPermit",
  ): TypedContractMethod<
    [
      _usdToken: AddressLike,
      _goldAmount: BigNumberish,
      _minUsdAmount: BigNumberish,
      _sigDeadline: BigNumberish,
      _signature: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestMint",
  ): TypedContractMethod<
    [
      _usdToken: AddressLike,
      _usdAmount: BigNumberish,
      _minGoldAmount: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestMintPermit",
  ): TypedContractMethod<
    [
      _usdToken: AddressLike,
      _usdAmount: BigNumberish,
      _minGoldAmount: BigNumberish,
      _sigDeadline: BigNumberish,
      _signature: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLevel",
  ): TypedContractMethod<
    [user: AddressLike, level: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settleBurn",
  ): TypedContractMethod<
    [burnNonce: BigNumberish, usdAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settleMint",
  ): TypedContractMethod<
    [mintNonce: BigNumberish, goldAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settlers",
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "slippage",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradeLevel",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership",
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAutoSettle",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFees",
  ): TypedContractMethod<[_fees: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinGold",
  ): TypedContractMethod<[_minGold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinGoldFee",
  ): TypedContractMethod<[_minGoldFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinGoldFeeAmount",
  ): TypedContractMethod<
    [_minGoldFeeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRecipient",
  ): TypedContractMethod<[_usdRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSlippage",
  ): TypedContractMethod<[_slippage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTradingLevel",
  ): TypedContractMethod<[level: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdRecipient",
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AddSettler",
  ): TypedContractEvent<
    AddSettlerEvent.InputTuple,
    AddSettlerEvent.OutputTuple,
    AddSettlerEvent.OutputObject
  >;
  getEvent(
    key: "Initialized(uint64)",
  ): TypedContractEvent<
    Initialized_uint64_Event.InputTuple,
    Initialized_uint64_Event.OutputTuple,
    Initialized_uint64_Event.OutputObject
  >;
  getEvent(
    key: "Initialized(address,uint8,address,uint8,address,uint8,address,address)",
  ): TypedContractEvent<
    Initialized_address_uint8_address_uint8_address_uint8_address_address_Event.InputTuple,
    Initialized_address_uint8_address_uint8_address_uint8_address_address_Event.OutputTuple,
    Initialized_address_uint8_address_uint8_address_uint8_address_address_Event.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred",
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RemoveSettler",
  ): TypedContractEvent<
    RemoveSettlerEvent.InputTuple,
    RemoveSettlerEvent.OutputTuple,
    RemoveSettlerEvent.OutputObject
  >;
  getEvent(
    key: "RequestBurn",
  ): TypedContractEvent<
    RequestBurnEvent.InputTuple,
    RequestBurnEvent.OutputTuple,
    RequestBurnEvent.OutputObject
  >;
  getEvent(
    key: "RequestMint",
  ): TypedContractEvent<
    RequestMintEvent.InputTuple,
    RequestMintEvent.OutputTuple,
    RequestMintEvent.OutputObject
  >;
  getEvent(
    key: "SettleBurn",
  ): TypedContractEvent<
    SettleBurnEvent.InputTuple,
    SettleBurnEvent.OutputTuple,
    SettleBurnEvent.OutputObject
  >;
  getEvent(
    key: "SettleMint",
  ): TypedContractEvent<
    SettleMintEvent.InputTuple,
    SettleMintEvent.OutputTuple,
    SettleMintEvent.OutputObject
  >;
  getEvent(
    key: "UpdateAutoSettle",
  ): TypedContractEvent<
    UpdateAutoSettleEvent.InputTuple,
    UpdateAutoSettleEvent.OutputTuple,
    UpdateAutoSettleEvent.OutputObject
  >;
  getEvent(
    key: "UpdateFees",
  ): TypedContractEvent<
    UpdateFeesEvent.InputTuple,
    UpdateFeesEvent.OutputTuple,
    UpdateFeesEvent.OutputObject
  >;
  getEvent(
    key: "UpdateLevel",
  ): TypedContractEvent<
    UpdateLevelEvent.InputTuple,
    UpdateLevelEvent.OutputTuple,
    UpdateLevelEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMinGold",
  ): TypedContractEvent<
    UpdateMinGoldEvent.InputTuple,
    UpdateMinGoldEvent.OutputTuple,
    UpdateMinGoldEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMinGoldFee",
  ): TypedContractEvent<
    UpdateMinGoldFeeEvent.InputTuple,
    UpdateMinGoldFeeEvent.OutputTuple,
    UpdateMinGoldFeeEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMinGoldFeeAmount",
  ): TypedContractEvent<
    UpdateMinGoldFeeAmountEvent.InputTuple,
    UpdateMinGoldFeeAmountEvent.OutputTuple,
    UpdateMinGoldFeeAmountEvent.OutputObject
  >;
  getEvent(
    key: "UpdateRecipient",
  ): TypedContractEvent<
    UpdateRecipientEvent.InputTuple,
    UpdateRecipientEvent.OutputTuple,
    UpdateRecipientEvent.OutputObject
  >;
  getEvent(
    key: "UpdateSlippage",
  ): TypedContractEvent<
    UpdateSlippageEvent.InputTuple,
    UpdateSlippageEvent.OutputTuple,
    UpdateSlippageEvent.OutputObject
  >;
  getEvent(
    key: "UpdateTradingLevel",
  ): TypedContractEvent<
    UpdateTradingLevelEvent.InputTuple,
    UpdateTradingLevelEvent.OutputTuple,
    UpdateTradingLevelEvent.OutputObject
  >;

  filters: {
    "AddSettler(address)": TypedContractEvent<
      AddSettlerEvent.InputTuple,
      AddSettlerEvent.OutputTuple,
      AddSettlerEvent.OutputObject
    >;
    AddSettler: TypedContractEvent<
      AddSettlerEvent.InputTuple,
      AddSettlerEvent.OutputTuple,
      AddSettlerEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      Initialized_uint64_Event.InputTuple,
      Initialized_uint64_Event.OutputTuple,
      Initialized_uint64_Event.OutputObject
    >;
    "Initialized(address,uint8,address,uint8,address,uint8,address,address)": TypedContractEvent<
      Initialized_address_uint8_address_uint8_address_uint8_address_address_Event.InputTuple,
      Initialized_address_uint8_address_uint8_address_uint8_address_address_Event.OutputTuple,
      Initialized_address_uint8_address_uint8_address_uint8_address_address_Event.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RemoveSettler(address)": TypedContractEvent<
      RemoveSettlerEvent.InputTuple,
      RemoveSettlerEvent.OutputTuple,
      RemoveSettlerEvent.OutputObject
    >;
    RemoveSettler: TypedContractEvent<
      RemoveSettlerEvent.InputTuple,
      RemoveSettlerEvent.OutputTuple,
      RemoveSettlerEvent.OutputObject
    >;

    "RequestBurn(uint256,address,address,uint256,uint256)": TypedContractEvent<
      RequestBurnEvent.InputTuple,
      RequestBurnEvent.OutputTuple,
      RequestBurnEvent.OutputObject
    >;
    RequestBurn: TypedContractEvent<
      RequestBurnEvent.InputTuple,
      RequestBurnEvent.OutputTuple,
      RequestBurnEvent.OutputObject
    >;

    "RequestMint(uint256,address,address,uint256,uint256)": TypedContractEvent<
      RequestMintEvent.InputTuple,
      RequestMintEvent.OutputTuple,
      RequestMintEvent.OutputObject
    >;
    RequestMint: TypedContractEvent<
      RequestMintEvent.InputTuple,
      RequestMintEvent.OutputTuple,
      RequestMintEvent.OutputObject
    >;

    "SettleBurn(uint256,uint256,bool)": TypedContractEvent<
      SettleBurnEvent.InputTuple,
      SettleBurnEvent.OutputTuple,
      SettleBurnEvent.OutputObject
    >;
    SettleBurn: TypedContractEvent<
      SettleBurnEvent.InputTuple,
      SettleBurnEvent.OutputTuple,
      SettleBurnEvent.OutputObject
    >;

    "SettleMint(uint256,uint256,bool)": TypedContractEvent<
      SettleMintEvent.InputTuple,
      SettleMintEvent.OutputTuple,
      SettleMintEvent.OutputObject
    >;
    SettleMint: TypedContractEvent<
      SettleMintEvent.InputTuple,
      SettleMintEvent.OutputTuple,
      SettleMintEvent.OutputObject
    >;

    "UpdateAutoSettle(bool)": TypedContractEvent<
      UpdateAutoSettleEvent.InputTuple,
      UpdateAutoSettleEvent.OutputTuple,
      UpdateAutoSettleEvent.OutputObject
    >;
    UpdateAutoSettle: TypedContractEvent<
      UpdateAutoSettleEvent.InputTuple,
      UpdateAutoSettleEvent.OutputTuple,
      UpdateAutoSettleEvent.OutputObject
    >;

    "UpdateFees(uint16)": TypedContractEvent<
      UpdateFeesEvent.InputTuple,
      UpdateFeesEvent.OutputTuple,
      UpdateFeesEvent.OutputObject
    >;
    UpdateFees: TypedContractEvent<
      UpdateFeesEvent.InputTuple,
      UpdateFeesEvent.OutputTuple,
      UpdateFeesEvent.OutputObject
    >;

    "UpdateLevel(address,uint8)": TypedContractEvent<
      UpdateLevelEvent.InputTuple,
      UpdateLevelEvent.OutputTuple,
      UpdateLevelEvent.OutputObject
    >;
    UpdateLevel: TypedContractEvent<
      UpdateLevelEvent.InputTuple,
      UpdateLevelEvent.OutputTuple,
      UpdateLevelEvent.OutputObject
    >;

    "UpdateMinGold(uint256)": TypedContractEvent<
      UpdateMinGoldEvent.InputTuple,
      UpdateMinGoldEvent.OutputTuple,
      UpdateMinGoldEvent.OutputObject
    >;
    UpdateMinGold: TypedContractEvent<
      UpdateMinGoldEvent.InputTuple,
      UpdateMinGoldEvent.OutputTuple,
      UpdateMinGoldEvent.OutputObject
    >;

    "UpdateMinGoldFee(uint256)": TypedContractEvent<
      UpdateMinGoldFeeEvent.InputTuple,
      UpdateMinGoldFeeEvent.OutputTuple,
      UpdateMinGoldFeeEvent.OutputObject
    >;
    UpdateMinGoldFee: TypedContractEvent<
      UpdateMinGoldFeeEvent.InputTuple,
      UpdateMinGoldFeeEvent.OutputTuple,
      UpdateMinGoldFeeEvent.OutputObject
    >;

    "UpdateMinGoldFeeAmount(uint256)": TypedContractEvent<
      UpdateMinGoldFeeAmountEvent.InputTuple,
      UpdateMinGoldFeeAmountEvent.OutputTuple,
      UpdateMinGoldFeeAmountEvent.OutputObject
    >;
    UpdateMinGoldFeeAmount: TypedContractEvent<
      UpdateMinGoldFeeAmountEvent.InputTuple,
      UpdateMinGoldFeeAmountEvent.OutputTuple,
      UpdateMinGoldFeeAmountEvent.OutputObject
    >;

    "UpdateRecipient(address)": TypedContractEvent<
      UpdateRecipientEvent.InputTuple,
      UpdateRecipientEvent.OutputTuple,
      UpdateRecipientEvent.OutputObject
    >;
    UpdateRecipient: TypedContractEvent<
      UpdateRecipientEvent.InputTuple,
      UpdateRecipientEvent.OutputTuple,
      UpdateRecipientEvent.OutputObject
    >;

    "UpdateSlippage(uint16)": TypedContractEvent<
      UpdateSlippageEvent.InputTuple,
      UpdateSlippageEvent.OutputTuple,
      UpdateSlippageEvent.OutputObject
    >;
    UpdateSlippage: TypedContractEvent<
      UpdateSlippageEvent.InputTuple,
      UpdateSlippageEvent.OutputTuple,
      UpdateSlippageEvent.OutputObject
    >;

    "UpdateTradingLevel(uint8)": TypedContractEvent<
      UpdateTradingLevelEvent.InputTuple,
      UpdateTradingLevelEvent.OutputTuple,
      UpdateTradingLevelEvent.OutputObject
    >;
    UpdateTradingLevel: TypedContractEvent<
      UpdateTradingLevelEvent.InputTuple,
      UpdateTradingLevelEvent.OutputTuple,
      UpdateTradingLevelEvent.OutputObject
    >;
  };
}
